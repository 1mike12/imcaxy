// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thebartekbanach/imcaxy/pkg/hub (interfaces: DataStreamOutput)

// Package mock_hub is a generated GoMock package.
package mock_hub

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataStreamOutput is a mock of DataStreamOutput interface.
type MockDataStreamOutput struct {
	ctrl     *gomock.Controller
	recorder *MockDataStreamOutputMockRecorder
}

// MockDataStreamOutputMockRecorder is the mock recorder for MockDataStreamOutput.
type MockDataStreamOutputMockRecorder struct {
	mock *MockDataStreamOutput
}

// NewMockDataStreamOutput creates a new mock instance.
func NewMockDataStreamOutput(ctrl *gomock.Controller) *MockDataStreamOutput {
	mock := &MockDataStreamOutput{ctrl: ctrl}
	mock.recorder = &MockDataStreamOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStreamOutput) EXPECT() *MockDataStreamOutputMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDataStreamOutput) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDataStreamOutputMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDataStreamOutput)(nil).Close))
}

// Read mocks base method.
func (m *MockDataStreamOutput) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockDataStreamOutputMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDataStreamOutput)(nil).Read), arg0)
}

// ReadAt mocks base method.
func (m *MockDataStreamOutput) ReadAt(arg0 []byte, arg1 int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAt", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt.
func (mr *MockDataStreamOutputMockRecorder) ReadAt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockDataStreamOutput)(nil).ReadAt), arg0,
		arg1)
}

// Seek mocks base method.
func (m *MockDataStreamOutput) Seek(arg0 int64, arg1 int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockDataStreamOutputMockRecorder) Seek(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockDataStreamOutput)(nil).Seek), arg0, arg1)
}

// WriteTo mocks base method.
func (m *MockDataStreamOutput) WriteTo(arg0 io.Writer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTo indicates an expected call of WriteTo.
func (mr *MockDataStreamOutputMockRecorder) WriteTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockDataStreamOutput)(nil).WriteTo), arg0)
}
