// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thebartekbanach/imcaxy/pkg/hub (interfaces: DataHub)

// Package mock_hub is a generated GoMock package.
package mock_hub

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hub "github.com/thebartekbanach/imcaxy/pkg/hub"
)

// MockDataHub is a mock of DataHub interface.
type MockDataHub struct {
	ctrl     *gomock.Controller
	recorder *MockDataHubMockRecorder
}

// MockDataHubMockRecorder is the mock recorder for MockDataHub.
type MockDataHubMockRecorder struct {
	mock *MockDataHub
}

// NewMockDataHub creates a new mock instance.
func NewMockDataHub(ctrl *gomock.Controller) *MockDataHub {
	mock := &MockDataHub{ctrl: ctrl}
	mock.recorder = &MockDataHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataHub) EXPECT() *MockDataHubMockRecorder {
	return m.recorder
}

// CreateStream mocks base method.
func (m *MockDataHub) CreateStream(arg0 string) (hub.DataStreamInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", arg0)
	ret0, _ := ret[0].(hub.DataStreamInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockDataHubMockRecorder) CreateStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockDataHub)(nil).CreateStream), arg0)
}

// GetOrCreateStream mocks base method.
func (m *MockDataHub) GetOrCreateStream(arg0 string) (hub.DataStreamOutput, hub.DataStreamInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateStream", arg0)
	ret0, _ := ret[0].(hub.DataStreamOutput)
	ret1, _ := ret[1].(hub.DataStreamInput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrCreateStream indicates an expected call of GetOrCreateStream.
func (mr *MockDataHubMockRecorder) GetOrCreateStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateStream", reflect.TypeOf((*MockDataHub)(nil).GetOrCreateStream), arg0)
}

// GetStreamOutput mocks base method.
func (m *MockDataHub) GetStreamOutput(arg0 string) (hub.DataStreamOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamOutput", arg0)
	ret0, _ := ret[0].(hub.DataStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamOutput indicates an expected call of GetStreamOutput.
func (mr *MockDataHubMockRecorder) GetStreamOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamOutput", reflect.TypeOf((*MockDataHub)(nil).GetStreamOutput), arg0)
}

// StartMonitors mocks base method.
func (m *MockDataHub) StartMonitors(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartMonitors", arg0)
}

// StartMonitors indicates an expected call of StartMonitors.
func (mr *MockDataHubMockRecorder) StartMonitors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMonitors", reflect.TypeOf((*MockDataHub)(nil).StartMonitors), arg0)
}
