// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thebartekbanach/imcaxy/pkg/hub/storage (interfaces: StorageAdapter)

// Package mock_datahubstorage is a generated GoMock package.
package mock_datahubstorage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	datahubstorage "github.com/thebartekbanach/imcaxy/pkg/hub/storage"
)

// MockStorageAdapter is a mock of StorageAdapter interface.
type MockStorageAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockStorageAdapterMockRecorder
}

// MockStorageAdapterMockRecorder is the mock recorder for MockStorageAdapter.
type MockStorageAdapterMockRecorder struct {
	mock *MockStorageAdapter
}

// NewMockStorageAdapter creates a new mock instance.
func NewMockStorageAdapter(ctrl *gomock.Controller) *MockStorageAdapter {
	mock := &MockStorageAdapter{ctrl: ctrl}
	mock.recorder = &MockStorageAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageAdapter) EXPECT() *MockStorageAdapterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorageAdapter) Close(arg0 string, arg1 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageAdapterMockRecorder) Close(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorageAdapter)(nil).Close), arg0, arg1)
}

// Create mocks base method.
func (m *MockStorageAdapter) Create(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStorageAdapterMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorageAdapter)(nil).Create), arg0)
}

// GetStreamReader mocks base method.
func (m *MockStorageAdapter) GetStreamReader(arg0 string) (datahubstorage.StreamReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamReader", arg0)
	ret0, _ := ret[0].(datahubstorage.StreamReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamReader indicates an expected call of GetStreamReader.
func (mr *MockStorageAdapterMockRecorder) GetStreamReader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamReader", reflect.TypeOf((*MockStorageAdapter)(nil).GetStreamReader), arg0)
}

// StartMonitors mocks base method.
func (m *MockStorageAdapter) StartMonitors(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartMonitors", arg0)
}

// StartMonitors indicates an expected call of StartMonitors.
func (mr *MockStorageAdapterMockRecorder) StartMonitors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMonitors", reflect.TypeOf((*MockStorageAdapter)(nil).StartMonitors), arg0)
}

// Write mocks base method.
func (m *MockStorageAdapter) Write(arg0 string, arg1 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockStorageAdapterMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStorageAdapter)(nil).Write), arg0, arg1)
}
