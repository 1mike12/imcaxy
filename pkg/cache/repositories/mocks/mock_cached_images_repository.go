// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thebartekbanach/imcaxy/pkg/cache/repositories (interfaces: CachedImagesRepository)

// Package mock_cacherepositories is a generated GoMock package.
package mock_cacherepositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cacherepositories "github.com/thebartekbanach/imcaxy/pkg/cache/repositories"
)

// MockCachedImagesRepository is a mock of CachedImagesRepository interface.
type MockCachedImagesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCachedImagesRepositoryMockRecorder
}

// MockCachedImagesRepositoryMockRecorder is the mock recorder for MockCachedImagesRepository.
type MockCachedImagesRepositoryMockRecorder struct {
	mock *MockCachedImagesRepository
}

// NewMockCachedImagesRepository creates a new mock instance.
func NewMockCachedImagesRepository(ctrl *gomock.Controller) *MockCachedImagesRepository {
	mock := &MockCachedImagesRepository{ctrl: ctrl}
	mock.recorder = &MockCachedImagesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCachedImagesRepository) EXPECT() *MockCachedImagesRepositoryMockRecorder {
	return m.recorder
}

// CreateCachedImageInfo mocks base method.
func (m *MockCachedImagesRepository) CreateCachedImageInfo(arg0 context.Context, arg1 cacherepositories.CachedImageModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCachedImageInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCachedImageInfo indicates an expected call of CreateCachedImageInfo.
func (mr *MockCachedImagesRepositoryMockRecorder) CreateCachedImageInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCachedImageInfo", reflect.TypeOf((*MockCachedImagesRepository)(nil).CreateCachedImageInfo), arg0, arg1)
}

// DeleteCachedImageInfo mocks base method.
func (m *MockCachedImagesRepository) DeleteCachedImageInfo(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCachedImageInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCachedImageInfo indicates an expected call of DeleteCachedImageInfo.
func (mr *MockCachedImagesRepositoryMockRecorder) DeleteCachedImageInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCachedImageInfo", reflect.TypeOf((*MockCachedImagesRepository)(nil).DeleteCachedImageInfo), arg0, arg1, arg2)
}

// GetCachedImageInfo mocks base method.
func (m *MockCachedImagesRepository) GetCachedImageInfo(arg0 context.Context, arg1, arg2 string) (cacherepositories.CachedImageModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedImageInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(cacherepositories.CachedImageModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachedImageInfo indicates an expected call of GetCachedImageInfo.
func (mr *MockCachedImagesRepositoryMockRecorder) GetCachedImageInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedImageInfo", reflect.TypeOf((*MockCachedImagesRepository)(nil).GetCachedImageInfo), arg0, arg1, arg2)
}

// GetCachedImageInfosOfSource mocks base method.
func (m *MockCachedImagesRepository) GetCachedImageInfosOfSource(arg0 context.Context, arg1 string) ([]cacherepositories.CachedImageModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedImageInfosOfSource", arg0, arg1)
	ret0, _ := ret[0].([]cacherepositories.CachedImageModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachedImageInfosOfSource indicates an expected call of GetCachedImageInfosOfSource.
func (mr *MockCachedImagesRepositoryMockRecorder) GetCachedImageInfosOfSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedImageInfosOfSource", reflect.TypeOf((*MockCachedImagesRepository)(nil).GetCachedImageInfosOfSource), arg0, arg1)
}
